#!/usr/bin/env python
'''
Converts an ASKotec Module meta-data file (module.yaml)
into an RDF/Turtle file.
'''

import re
import yaml
import rdflib
from rdflib.namespace import DC, DCTERMS, DOAP, FOAF, SKOS, OWL, RDF, RDFS, VOID, XMLNS, XSD
import click

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

SCHEMA  = rdflib.Namespace('http://schema.org/')
ASK  = rdflib.Namespace('http://myontology.com/')
ASKA = rdflib.Namespace('http://myontology.com/authors/')
ASKM = rdflib.Namespace('http://myontology.com/modules/')
ASKC = rdflib.Namespace('http://myontology.com/materials/')
ASKT = rdflib.Namespace('http://myontology.com/tools/')

@click.group(context_settings=CONTEXT_SETTINGS)
@click.version_option()
def version_token():
    pass

def version_compare(ver1, ver2): # TODO Implement this function
    '''
    Compares two version strings.
    '''
    return 0

def rdf_str(s):
    '''
    Converts a simple string into an RDF string (xsd:string).
    '''
    return rdflib.Literal(s, datatype=XSD.string)

def rdf_int(s):
    '''
    Converts a simple string into an RDF int (xsd:int).
    '''
    return rdflib.Literal(s, datatype=XSD.int)

def str2id(s):
    '''
    Converts a random string into a valid RDF id (the last part of an IRI).
    '''
    return re.sub('[^a-zA-Z0-9_-]+', '_', s)

def convert_module_yaml_to_rdf(yaml, pref_file=None):
    '''
    Converts ASKotec Module meta-data content
    into an RDF/Turtle string.
    '''

    supported_version = "1.0"
    if version_compare(yaml['version'], supported_version) < 0:
        raise 'The content version is not supported by this converter. Please get a newer version!'

    #rdflib.URIRef("http://example.com/person/nick"),
    #for part in yaml:
    #    print(part)

    g = rdflib.Graph()

    g.bind("rdf", RDF)
    g.bind("rdfs", RDFS)
    g.bind("schema", SCHEMA)
    g.bind("foaf", FOAF)
    g.bind("xsd",  XSD)
    g.bind("ask",  ASK)
    g.bind("aska", ASKA)
    g.bind("askm", ASKM)

    if not pref_file is None:
        pref_s = open(pref_file, 'w')
        for pre, iri in g.namespaces():
            pref_s.write('PREFIX %s: <%s>\n' % (pre, iri))
        pref_s.close()

    y = yaml['training-module']
    m_s = ASKM[str2id(y['name'])]

    g.add(( m_s, RDF.type, ASK.Module ))
    g.add(( m_s, RDFS.label, rdf_str(y['name']) ))
    g.add(( m_s, ASKM.manual, rdf_str(y['manual']) ))
    g.add(( m_s, ASKM.release, rdf_str(y['release']) ))
    g.add(( m_s, ASKM.duration, rdf_str(y['duration']) ))
    g.add(( m_s, ASKM.maxParticipians, rdf_str(y['max-participians']) ))
    g.add(( m_s, ASKM.compatibility, rdf_str(y['compatibility']) ))
    g.add(( m_s, ASKM.blogPosts, rdf_str(y['blog-posts']) ))
    g.add(( m_s, ASKM.issues, rdf_str(y['issues']) ))
    g.add(( m_s, ASKM.newIssue, rdf_str(y['new-issue']) ))

    for a in y['authors']:
        a_s  = ASKA[str2id(a['name'])]
        g.add(( a_s, RDF.type, ASK.Author ))
        g.add(( a_s, RDFS.label, rdf_str(a['name']) ))
        g.add(( a_s, SCHEMA.mbox, rdf_str(a['mail']) ))
        g.add(( a_s, SCHEMA.github, rdf_str(a['github-profile']) ))
        g.add(( a_s, SCHEMA.telegram, rdf_str(a['telegram']) ))
        g.add(( m_s, ASKM.author, a_s ))

    for elem in y['resources']:
        g.add(( m_s, ASKM.resource, rdf_str(elem['url']) ))

    for l in y['licenses']:
        l_s  = ASKM[str2id(l['name'])]
        g.add(( l_s, RDF.type, ASK.License ))
        g.add(( l_s, RDFS.label, rdf_str(l['name']) ))
        g.add(( l_s, SCHEMA.stockroom, rdf_str(l['file']) ))
        g.add(( m_s, ASKM.license, l_s ))

    return g.serialize(format="turtle").decode("utf-8")


@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('yaml_file', type=click.Path(), envvar='YAML_FILE', default='./module.yml')
@click.argument('rdf_file', type=click.Path(), envvar='RDF_FILE', default='./module.ttl')
@click.argument('pref_file', type=click.Path(), envvar='PREF_FILE', default='./Prefixes.pref')
@click.version_option("1.0")
def convert_module(yaml_file='./module.yml', rdf_file='./module.ttl', pref_file='./Prefixes.pref'):
    '''
    Converts an ASKotec Module meta-data file (module.yaml)
    into an RDF/Turtle file.
    '''
    in_s = open(yaml_file, 'r')
    mod_yaml = yaml.load(in_s, Loader=yaml.SafeLoader)
    in_s.close()

    mod_rdf = convert_module_yaml_to_rdf(mod_yaml, pref_file)

    out_s = open(rdf_file, 'w')
    out_s.write(mod_rdf)
    out_s.close()

if __name__ == '__main__':
    convert_module()
